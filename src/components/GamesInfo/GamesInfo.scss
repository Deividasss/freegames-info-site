.nftEditMain {
    background-color: rgba(255, 255, 255, 0.118);
    color: white;
    padding-top: 7%;
}
.nftEditImg {
    width: 100%;
    max-width: 500px;
    height: auto;
    border-radius: 10px;
    opacity: 0.9;
    box-shadow: 0px 2px 29px 6px rgba(0, 0, 0, 0.75);
    -webkit-box-shadow: 0px 2px 29px 6px rgba(0, 0, 0, 0.75);
    -moz-box-shadow: 0px 2px 29px 6px rgba(0, 0, 0, 0.75);
}
.nftInfoMain {
    display: flex;
}
.nftTitle {
    font-size: 40px;
}
.nftCollection {
    font-size: 20px;
    color: rgb(224, 151, 6);
    margin-top: 10%;
}
.collectionImg {
    width: 20px;
    margin-left: 5px;
}
.nftInfo {
    margin: 0% 0 0 8%;
}

.nftDescriptionTitle {
    margin-top: 3%;
    font-size: 20px;
}
.description {
    margin: 5% 10%;
    width: 80%;
}
.nftDescription {
    font-size: 15px;
}
.details {
    margin: auto;
    width: 130%;
    padding-top: 10%;
    color: rgb(224, 151, 6);
}
.nftDetails {
    font-size: 20px;
}
.nftCreator {
    font-size: 14px;
    color: rgba(255, 255, 255, 0.652);
}
.nftCreatorEmail {
    float: right;
    color: rgba(240, 239, 239, 0.773);
}
span {
    a {
        color: rgb(224, 151, 6);
    }
}
span a:hover {
    color: rgb(165, 165, 115);
}
.itemModalBtn {
    float: right;
    margin: 2%;
}
.requirements {
    margin: auto;
    margin-top: 2%;
    width: 50%;
    padding-bottom: 10%;
    color: rgb(224, 151, 6);
}

@media screen and (max-width: 500px) {
    .description {
        margin: auto;
        margin-bottom: 10%;
        width: 100%;
        margin-top: -10%;
    }
    .nftInfo {
        margin: 0;
    }
    .nftInfoMain {
        display: block;
    }
    .nftCollection {
        margin: 10% 0% 0 0;
    }
    .nftEditImg {
        margin: auto;
        margin-top: 25%;
        width: 100%;
        max-width: 500px;
        height: auto;
    }
    .nftTitle {
        padding-bottom: 10%;
    }
    .details {
        padding: 0 0 15% 0;
        width: 100%;
        margin: auto;
    }
    .requirements {
        width: 100%;
        margin: auto;
        padding: 0 0 35% 0;
    }
    .nftCreator {
        font-size: 14px;
        color: rgba(255, 255, 255, 0.652);
    }
    .nftCreatorEmail {
        float: right;
        color: rgba(240, 239, 239, 0.773);
        font-size: 12px;
    }
}


/* {games.filter(goods => goods.title.toLowerCase().includes(search)).map((game) => (
                            <div class="col-md-3 ">
                                <div class="product-grid">
                                    <div class="product-image">
                                        <a onClick={() => { setGameId(game.id); navigate("/gameInfo", { state: game.id }) }} class="image">
                                            <img class="pic-1" src={game.thumbnail} />
                                        </a>
                                    </div>
                                    <div class="product-content">
                                        <h3 className="product-title">{game.title}</h3>
                                        <hr className="line"></hr>
                                        <h3 className="product-collection">Developer<span className="product-network">{game.developer}</span></h3>
                                        <h3 className="product-collection">Genre<span className="product-network">{game.genre}</span></h3>
                                        <h3 className="product-collection">Platform<span className="product-network">{game.platform}</span></h3>
                                    </div>
                                </div>
                            </div>
                        ))} 
                        
                        
                        
                        axios.request(options).then(function (response) {
            for (let i = 0; i < response.data.length; i++) {
                setGames(response.data)
            }
        })
        
        
         axios.request(options2).then(function (response) {
                setGames2(response.data)
                for (let i = 0; i < response.data.minimum_system_requirements.graphics.length; i++) {
                    setGraphics(response.data.minimum_system_requirements.graphics)
                }
                for (let i = 0; i < response.data.minimum_system_requirements.memory.length; i++) {
                    setMemory(response.data.minimum_system_requirements.memory)
                }
                for (let i = 0; i < response.data.minimum_system_requirements.os.length; i++) {
                    setOs(response.data.minimum_system_requirements.os)
                }
                for (let i = 0; i < response.data.minimum_system_requirements.processor.length; i++) {
                    setProcessor(response.data.minimum_system_requirements.processor)
                }
            })*/
